/*
 * Rust client test spec
 *
 * Special testing for the Rust client generator
 *
 * The version of the OpenAPI document: 1.0.7
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct DefaultApiClient<C: hyper::client::connect::Connect + Clone + Send + Sync + 'static> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::connect::Connect + Clone + Send + Sync + 'static> DefaultApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> DefaultApiClient<C> {
        DefaultApiClient {
            configuration,
        }
    }
}

pub trait DefaultApi {
    fn dummy_get(&self, ) -> Box<dyn Future<Output = Result<(), Error<serde_json::Value>>>>;
}

impl<C: hyper::client::connect::Connect + Clone + Send + Sync + 'static>DefaultApi for DefaultApiClient<C> {
    fn dummy_get(&self, ) -> Box<dyn Future<Output = Result<(), Error<serde_json::Value>>>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/dummy".to_string())
        ;
        req = req.returns_nothing();

        // TODO: do not box here
        Box::new(req.execute(self.configuration.borrow()))
    }

}
